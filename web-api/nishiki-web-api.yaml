openapi: "3.0.3"
info:
  title: Nishiki Web API
  description: Nishiki
  version: 1.0.0
servers:
  - url: www
tags:
  - name: user
    description: user of Nishiki system
paths:
  /auth/me:
    get:
      summary: Get a User ID
      description: The user is identified by the token.
      tags:
        - auth
      responses:
        "200":
          description: User ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserId"
  /users:
    post:
      description: Create a new user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - emailAddress
              properties:
                name:
                  description: username. this name is not provided, the name will be set as a default value.
                  type: string
                  nullable: true
                emailAddress:
                  type: string
      responses:
        "201":
          description: user created
  /users/{userId}:
    get:
      description: Get a user
      tags:
        - user
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: get user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    put:
      description: Update a user data
      tags:
        - user
      parameters:
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: user's name
                  type: string
      responses:
        "204":
          description: update user's information
        "401":
          description: try to change other user's information
  /containers:
    get:
      summary: Get a list of the user's container
      description: The requesting user is identified by the token of request.
      tags:
        - container
      responses:
        "200":
          description: Get containers linked to the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  containers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Container"
                    example:
                      - id: 11111111-ee7b-4558-b8d5-371514e77bed
                        name: Shared-house's Fridge
                        group:
                            groupId: a3kdifut-a520-c2cb-1be7-d90710691861
                            groupName: Shared-house
                        foods:
                          - id: 11111111-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: arugula
                            quantity: 500
                            category: vegetables
                            unit: g
                            expiry: 2023-12-10T00:00:00.000Z
                            createdAt: 2023-12-01T00:00:00.000Z
                          - id: 22222222-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: tomato
                            quantity: 5
                            category: vegetables
                            unit:
                            expiry: 2023-12-25T00:00:00.000Z
                            createdAt: 2023-12-04T00:00:00.000Z                          
                      - id: 22222222-ee7b-4558-b8d5-371514e77bed
                        name: Family's Fridge
                        group:
                            groupId: c3a8df3e-a520-c2cb-1be7-d90710691861
                            groupName: Tom's family
                        foods:
                          - id: 33333333-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: onion
                            quantity: 3
                            category: vegetables
                            unit:
                            expiry: 2023-12-15T00:00:00.000Z
                            createdAt: 2023-12-01T00:00:00.000Z
                          - id: 44444444-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: chicken thigh
                            quantity: 0.5
                            category: meat
                            unit: kg
                            expiry: 2023-12-15T00:00:00.000Z
                            createdAt: 2023-12-01T00:00:00.000Z   
                      - id: 33333333-ee7b-4558-b8d5-371514e77bed
                        name: Camping Fridge
                        group:
                            groupId: c3a8df3e-a520-c2cb-1be7-d90710691861
                            groupName: Tom's family
                        foods:
                          - id: 55555555-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: Beef steak
                            quantity: 700
                            category: meat
                            unit: g
                            expiry: 2023-12-20T00:00:00.000Z
                            createdAt: 2023-12-03T00:00:00.000Z
                          - id: 66666666-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: Beer
                            quantity: 10
                            category: beverage
                            unit: can
                            expiry: 2024-03-15T00:00:00.000Z
                            createdAt: 2023-12-01T00:00:00.000Z   
                          - id: 77777777-58b7-4c3d-9548-fc0a4d3b3ef4
                            name: Red Wine 
                            quantity: 3
                            category: beverage
                            unit: bottle
                            expiry: 2024-06-15T00:00:00.000Z
                            createdAt: 2023-12-03T00:00:00.000Z   
    post:
      description: create a new container
      tags:
        - container
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupId:
                  type: string
                  nullable: false
                  example: groupId
                name:
                  type: string
                  nullable: true
                  example: my-container
      responses:
        "201":
          description: creation complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  containerId:
                    type: string
                    description: generated container ID
                    example: containerId
  /containers/{containerId}:
    get:
      description: get a container information
      tags:
        - container
      parameters:
        - name: containerId
          in: path
          description: ID of container
          required: true
          schema:
            type: string
      responses:
        "200":
          description: get a container
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
    put:
      summary: Update a container's name
      description: The requesting user is identified by the token of request.
      tags:
        - container
      parameters:
        - name: containerId
          in: path
          description: ID of container
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                containerName:
                  type: string
                  nullable: true
                  example: new-container
      responses:
        "204":
          description: The container name is updated
        "403":
          description: The user is not the owner of the container
    delete:
      summary: Delete a container
      description: This operation also deletes all foods in the container.
      tags:
        - container
      parameters:
        - name: containerId
          in: path
          description: ID of container
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deletion complete
        "403":
          description: A user tries to delete a container that is not owned by a requesting user.
  /containers/{containerId}/foods:
    post:
      description: add a new food
      tags:
        - container
      parameters:
        - name: containerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - unit
                - category
                - quantity
                - expiry
              properties:
                name:
                  type: string
                  nullable: false
                  example: bouillon
                unit:
                  type: string
                  nullable: true
                  example: l
                category:
                  type: string
                  example: Vegetables
                  nullable: false
                quantity:
                  type: integer
                  nullable: true
                  example: 1
                expiry:
                  type: string
                  format: date-time
                  nullable: true
                  example: 1970-01-01T00:00:00.000Z
      responses:
        "201":
          description: adding the food complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  foodId:
                    type: string
                    example: foodId
  /containers/{containerId}/foods/{foodId}:
    put:
      description: update a food
      tags:
        - container
      parameters:
        - name: containerId
          in: path
          description: ID of container
          required: true
          schema:
            type: string
        - name: foodId
          in: path
          description: ID of food
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - unit
                - category
                - quantity
                - expiry
              properties:
                name:
                  type: string
                  nullable: false
                  example: bouillon
                unit:
                  type: string
                  nullable: true
                  example: l
                category:
                  type: string
                  example: Vegetables
                  nullable: false                
                quantity:
                  type: integer
                  nullable: true
                  example: 1
                expiry:
                  type: string
                  format: date-time
                  nullable: true
                  example: 1970-01-01T00:00:00.000Z
      responses:
        "204":
          description: update complete
    delete:
      description: delete a food
      tags:
        - container
      parameters:
        - name: containerId
          in: path
          description: ID of container
          required: true
          schema:
            type: string
        - name: foodId
          in: path
          description: ID of food
          required: true
          schema:
            type: string
      responses:
        "204":
          description: deletion complete
  /groups:
    get:
      summary: Get a list of groups linked to a user
      description: The requesting user is detected by the token.
      tags:
        - group
      responses:
        "200":
          description: a list of groups information
          content:
            application/json:
              schema:
                type: object
                properties:
                  groups:
                    type: array
                    items:
                      $ref: "#/components/schemas/Group"
                    example:
                      - groupId: 82597aad-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Shared-house
                      - groupId: 22222222-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Tom's Family
                      - groupId: 33333333-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Nishiki
                      - groupId: 44444444-0d1b-4672-8b9a-fd3764cb9928
                        groupName: School Class A
                      - groupId: 55555555-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Running Club 
                      - groupId: 66666666-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Secret Group
                      - groupId: 77777777-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Tom & Jelly
                      - groupId: 88888888-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Wright Brothers
                      - groupId: 99999999-0d1b-4672-8b9a-fd3764cb9928
                        groupName: Gryffindor
    post:
      description: create a new group
      tags:
        - group
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
                  nullable: true
                  example: Shared-house
      responses:
        "201":
          description: generated group ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                    example: d4825cf5-0b1b-dce3-1aa1-ed9adfd6b0bd
  /groups/?Action=joinToGroup:
    put:
      summary: Join to a group
      description: Join to a group using the invitation link hash.
      tags:
        - group
      parameters:
        - name: Action
          in: query
          description: a place holder, must be 'joinToGroup'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                invitationLinkHash:
                  type: string
                  example: 3b6619cffb5f96e1acfa578badae372f
      responses:
        "202":
          description: The user is joined to the group. Returns the Group ID the user joined.
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                    example: d4825cf5-0b1b-dce3-1aa1-ed9adfd6b0bd
        "403":
          description: The invitation link hash is invalid
  /groups/{groupId}:
    get:
      description: Get a group
      tags:
        - group
      parameters:
        - name: groupId
          in: path
          description: ID of group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: get a group information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      summary: Update a group's name
      description: The requesting user is identified by the token of request.
      tags:
        - group
      parameters:
        - name: groupId
          in: path
          description: ID of group
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
                  nullable: true
                  example: new-group
      responses:
        "204":
          description: The group name is updated
        "403":
          description: The user is not the owner of the group
    delete:
      summary: Delete a group
      description: This operation also deletes all containers and foods in the group.
      tags:
        - group
      parameters:
        - name: groupId
          in: path
          description: ID of group
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deletion complete
        "403":
          description: A user tries to delete a group that is not owned by a requesting user.
  /groups/{groupId}/?Action=generateInvitaionLink:
    put:
      summary: Generate an invitation link
      description: Generate an invitation link, return hash of invitation link
      tags:
        - group
      parameters:
        - name: Action
          in: query
          description: a place holder, must be 'generateInvitaionLink'
          required: true
          schema:
            type: string
      responses:
        "201":
          description: A generated invitation link hash
          content:
            application/json:
              schema:
                type: object
                properties:
                  invitationLinkHash:
                    type: string
                    example: 3b6619cffb5f96e1acfa578badae372f
        "403":
          description: The user is not the owner of the group
  /groups/{groupId}/containers:
    get:
      description: get a list of the group's container
      tags:
        - group
      parameters:
        - name: groupId
          in: path
          description: ID of group
          required: true
          schema:
            type: string
      responses:
        "200":
          description: get group's containers
          content:
            application/json:
              schema:
                type: object
                properties:
                  containers:
                    type: array
                    items:
                      $ref: "#/components/schemas/Container"
  /groups/{groupId}/users:
    get:
      description: Get a list of users in the group
      tags:
        - group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
                    example:
                      - id: 11111111-ee7b-4558-b8d5-371514e77bed
                        name: James Smith
                      - id: 22222222-ee7b-4558-b8d5-371514e77bed
                        name: Emma Brown
                      - id: 33333333-ee7b-4558-b8d5-371514e77bed
                        name: Michael Johnson              
                      - id: 44444444-ee7b-4558-b8d5-371514e77bed
                        name: Sophia Thompson
  /groups/{groupId}/users/{userId}:
    delete:
      tags:
        - group
      parameters:
        - name: groupId
          in: path
          description: ID of group
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: ID of user
          required: true
          schema:
            type: string
      description: add the target user ID in the path parameter
      responses:
        "204":
          description: deletion complete
components:
  schemas:
    UserId:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: 2dd6dd70-5b3a-4329-9b70-01fd18c4b23c
    User:
      type: object
      properties:
        id:
          type: string
          nullable: false
          format: uuid
          example: 679adc58-b03a-4fb6-993b-c72404087375
        name:
          type: string
          nullable: false
          example: John
    Container:
      type: object
      properties:
        id:
          type: string
          nullable: false
          format: uuid
          example: 939a4c50-ee7b-4558-b8d5-371514e77bed
        name:
          type: string
          nullable: false
          example: Shared-house's Fridge
        group:
          type: object
          items:
            $ref: "#/components/schemas/Group"  
          example:
            groupId: a3kdifut-a520-c2cb-1be7-d90710691861
            groupName: Shared-house
        foods:
          type: array
          nullable: false
          items:     
            $ref: "#/components/schemas/Food"  
    Group:
      type: object
      properties:
        groupId:
          type: string
          nullable: false
          format: uuid
          example: 82597aad-0d1b-4672-8b9a-fd3764cb9928
        groupName:
          type: string
          nullable: false
          example: Shared-house
    Food:
      type: object
      properties:
        id:
          type: string
          example: 3c740136-58b7-4c3d-9548-fc0a4d3b3ef4
          format: uuid
          nullable: false
        name:
          type: string
          example: arugula
          nullable: false
        quantity:
          type: integer
          format: int64
          nullable: true
          example: 1
        category:
          type: string
          example: Vegetables
          nullable: false
        unit:
          type: string
          nullable: true
          example: kg
        expiry:
          type: string
          nullable: true
          format: date-time
          example: 2023-12-15T00:00:00.000Z
        createdAt:
          type: string
          nullable: true
          format: date-time
          example: 2023-12-01T00:00:00.000Z
